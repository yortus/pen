import {assert} from '../../utils';

// TODO: jsdoc...
export function createModuleNameGenerator() {
    const RESERVED_NAMES = ['start'];
    const existingModuleNames: string[] = [...RESERVED_NAMES];
    return function generateModuleName(modulePath: string) {
        let name = modulePath
            .split(/\/+|\\+/) // split on segment delimiters / and \
            .map(s => s.substring(0, s.indexOf('.')) || s) // remove extensions
            .reverse() // reverse the order of the segments
            .concat('module') // add a fallback name to guarantee the result is not undefined
            .filter(seg => seg && seg !== 'index') // remove empty and 'index' segments
            .shift()! // take the first segment
            .replace(/^[0-9]+/g, '') // remove leading digits, if any
            .replace(/[^a-zA-Z0-9]/g, '_'); // replace all non-alphanumeric chars with '_'
        assert(name); // name is guaranteed non-blank and starts with alpha or _ (ie a valid id)
    
        // Prefix module name with 'MODː' to ensure it can never clash with a program identifier.
        name = `MODː${name}`;

        // Ensure no duplicate or reserved module names are generated by adding a numeric suffix where necessary.
        let result = name;
        let counter = 1;
        while (existingModuleNames.includes(result)) result = `${name}ᱻ${++counter}`;
        existingModuleNames.push(result);
        return result;
    }
}
