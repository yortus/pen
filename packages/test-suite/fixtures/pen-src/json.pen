// ===============================================================================
// |                                  Imports                                    |
// ===============================================================================
(ascii, f64) = import 'std'
(unicode) = import 'experiments'


// ===============================================================================
// |                                  Exports                                    |
// ===============================================================================
start = WS   Value   WS


// ===============================================================================
// |                               Implementation                                |
// ===============================================================================

// ---------- Top-Level JSON Values ----------
Value =
    |   False
    |   Null
    |   True
    |   Object
    |   Array
    |   Number
    |   String

// ---------- Primitive values ----------
False   = #"false"   false
Null    = #"null"   null
True    = #"true"   true

// ---------- Objects ----------
Object      = LBRACE   (Property (COMMA Property)* | {})   RBRACE
Property  = {[String]: COLON Value}

/* NEW: ====================
// Option 1: ellipsis is followed by a field expression, which is iterated 0..M times. NB: requires records to support computed fieldname expressions again
Object1     = LBRACE   ({[String]: COLON Value   ...COMMA [String]: COLON Value} | {})   RBRACE

// Option 2: ellipsis is followed by record expression, with special syntax and/or handling for tail recursion -> iteration
Object2a    = LBRACE   ({[String]: COLON Value   ...COMMA rec} | {})   RBRACE // NB: special 'rec' syntax, simpler impl but looks weird

Object2b    = LBRACE   (Properties | {})   RBRACE // this way is cleanest, but hardest to impl
Properties  = {[String]: COLON Value   ...COMMA Properties} // NB: special detection of this form as tail-recursive, impl via iteration

// Option 3: extend 'field' syntax with optional ... before field name expression
Object3     = LBRACE   ({[String]: COLON Value} {...[COMMA String]: COLON Value} | {})   RBRACE // NB need for repetition here

// Option 4: generalised 0..M syntax with ellipsis, orthogonal to record syntax
Object4     = LBRACE   (Properties | {})   RBRACE
Properties  = {[String]: COLON Value}   ...(COMMA Properties) // NB: impl should detect this as tail-recursive and use iteration
==================== */

// ---------- Arrays ----------
Array       = LBRACKET   (Elements   |   [])   RBRACKET
Elements    = [Value, ...COMMA Elements]   |   [Value]

/* NEW: ====================
// Option 1: ellipsis is followed by an element expression, which is iterated 0..M times
Array1      = LBRACKET   ([Value, ...COMMA Value] | [])   RBRACKET

// Option 2: ellipsis is followed by list expression, with special syntax and/or handling for tail recursion -> iteration
Array2a     = LBRACKET   ([Value, ...COMMA rec] | [])   RBRACKET // NB: special 'rec' syntax, simpler impl but looks weird

Array2b     = LBRACKET   (Elements | [])   RBRACKET // this way is cleanest, but hardest to impl
Elements    = [Value, ...COMMA Elements] // NB: special detection of this form as tail-recursive, impl via iteration

// Option 3: N/A

// Option 4: generalised 0..M syntax with ellipsis, orthogonal to list syntax
Array       = LBRACKET   (Elements | [])   RBRACKET
Elements    = [Value]   ...(COMMA Elements) // NB: impl should detect this as tail-recursive and use iteration

==================== */

// ---------- Numbers ----------
Number = f64

// ---------- Strings ----------
String = DOUBLE_QUOTE   CHAR*   DOUBLE_QUOTE
// TODO: how is string of escape sequence chars (in SPAN) mapped to/from the single char it represents? (in NODE)
//       - something akin to `i32` which parses a number from the input span, call it `char`. Understands common escape sequences
// TODO: should support wider charset than ascii - this is not full JSON
CHAR =
    |   !"\\"   !"\""    ascii(min=0x20 max=0x7f)           // any ascii char except '\', '"', or control char
    |   #"\\\""   '"'                                       // quotation mark
    |   #"\\\\"   '\\'                                      // reverse solidus

    |   #"\\/"   '/'                                        // solidus
    |   #"\\b"   '\b'                                       // backspace
    |   #"\\f"   '\f'                                       // formfeed
    |   #"\\n"   '\n'                                       // newline
    |   #"\\r"  '\r'                                        // carriage return

    |   #"\\t"   '\t'                                       // horizontal tab
    |   #"\\u"   unicode(base=16 minDigits=4 maxDigits=4)   // unicode escape sequence

// ---------- Literal characters ----------

LBRACE          = WS   #"{"   WS
RBRACE          = WS   #"}"   WS
LBRACKET        = WS   #"["   WS

RBRACKET        = WS   #"]"   WS
COLON           = WS   #":"   WS
COMMA           = WS   #","   WS
DOUBLE_QUOTE    = #"\""
WS              = #(" " | "\t" | "\n" | "\r")*




/* syntax ideas...
CHAR =
    |   ifnot   ("\x00-\x1f" | "\"" | "\\")   then   anyChar        // any char except control char, " or \
    |   ...

WS              = repeat (` ` | `\t` | `\n` | `\r`)
WS              = repeat (` ` | `\t` | `\n` | `\r`) for 0..
WS              = for 0.. repeat (` ` | `\t` | `\n` | `\r`)
WS              = repeat (` ` | `\t` | `\n` | `\r`) 0.. times
WS              = repeat 0.. times (` ` | `\t` | `\n` | `\r`)
*/
