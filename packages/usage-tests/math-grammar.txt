

/*
 * egs:
 *      2 + 3 * 5
 *      42 * (333 - 2)
 */


Start       = <Expr> ws end
Expr        = Add | Sub | Term
Add         = {type: 'add', lhs: ws <Expr>, rhs: ws add ws <Term>}
Sub         = {type: 'sub', lhs: ws <Expr>, rhs: ws sub ws <Term>}

Term        = Mul | Div | Factor
Mul         = {type: 'mul', lhs: ws <Term>, rhs: ws mul ws <Factor>}
Div         = {type: 'div', lhs: ws <Term>, rhs: ws div ws <Factor>}

Factor      = Number | ParenExpr
Number      = {type: 'number', value: ws </[0-9]+/>}
ParenExpr   = {type: 'paren', expr: ws lp ws <Expr> ws rp}


// Rule names starting with an upper-case letter are always treated as source-only expressions.
// They are thus both strings and source-idioms. This means the `-"  "-` delimiters may be omitted
add         = "+"
sub         = "-"
mul         = "*"
div         = "/"
lp          = "("
rp          = ")"
ws          = /[ \t]*/
end         = !/./



// TODO...
'..'    ast-only string
".."    literal string
/../    string pattern (simplified regex)
a <b> c   means:
    a: precondition(s), leading source marker(s)
    b: transcoded content
    c: postcondition(s), trailing source marker(s)