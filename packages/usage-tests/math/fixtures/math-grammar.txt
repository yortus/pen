

/*
 * egs:
 *      2+3*5
 *      42*(333-2)
 */

Start = Expr

Expr = Add | Sub | Term
Add = {type: 'add', lhs: Memo<Expr>, rhs: ADD Term}
Sub = {type: 'sub', lhs: Memo<Expr>, rhs: SUB Term}

Term = Mul | Div | Factor
Mul = {type: 'mul', lhs: Memo<Term>, rhs: MUL Factor}
Div = {type: 'sub', lhs: Memo<Term>, rhs: DIV Factor}

Factor = i32 | LP Expr RP

ADD = `+`
SUB = `-`
MUL = `*`
DIV = `/`
LP  = `(`
RP  = `)`

/*
 * TODO...
 * '..'    ast-only string
 * ".."    literal string
 * /../    string pattern (simplified regex)
 * a <b> c   means:
 *     a: precondition(s), leading source marker(s)
 *     b: transcoded content
 *     c: postcondition(s), trailing source marker(s)
 */
