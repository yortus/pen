
// temp testing... this one works...
// start = A
// A = LeftRec<A `b` | `a`>    // accepts a, ab, abb, abbb, ...




/*
 * egs:
 *      2+3*5
 *      42*(333-2)
 */

start = expr

// TODO: temp testing...
//expr = LP (A | B) A A A RP
//A = "a"
//B = "b"

//expr = LeftRec<add | term>
//add = {type: 'add', lhs: expr, rhs: ADD term}
//term = i32




expr = LeftRec<add | sub | term>
add = {type: 'add', lhs: expr, rhs: ADD term}
sub = {type: 'sub', lhs: expr, rhs: SUB term}

term = LeftRec<mul | div | factor>
mul = {type: 'mul', lhs: term, rhs: MUL factor}
div = {type: 'div', lhs: term, rhs: DIV factor}

factor = i32 | LP expr RP

ADD = `+`
SUB = `-`
MUL = `*`
DIV = `/`
LP  = `(`
RP  = `)`

/*
 * TODO...
 * '..'    ast-only string
 * ".."    literal string
 * /../    string pattern (simplified regex)
 * a <b> c   means:
 *     a: precondition(s), leading source marker(s)
 *     b: transcoded content
 *     c: postcondition(s), trailing source marker(s)
 */
