// ---------- JSON Grammar ----------
start = WS   Value   WS
Value =
    |   False
    |   Null
    |   True
    |   Object
    |   Array
    |   Number
//    |   String

// ---------- Primitive values ----------
False   = `false` intrinsic_false  // Assumes `intrinsic_false`, `intrinsic_null` and `intrinsic_true` are defined to be abstract terminals
Null    = `null` intrinsic_null    // "   "
True    = `true` intrinsic_true    // "   "

// ---------- Objects ----------
Object      = LBRACE   (Properties | {})   RBRACE
Properties  = {[String]: COLON Value, ...Maybe<COMMA Properties>}

// ---------- Arrays ----------
Array       = LBRACKET   (Elements | [])   RBRACKET
Elements    = [Value, ...Maybe<COMMA Elements>]

// ---------- Numbers ----------
Number = i32 // TODO: should be f64? check JS specs

// ---------- Strings ----------
String = "a" | "b" | "c" | "d"

// ---------- Literal characters ----------
LBRACE          = WS `{` WS
RBRACE          = WS `}` WS
LBRACKET        = WS `[` WS
RBRACKET        = WS `]` WS
COLON           = WS `:` WS
COMMA           = WS `,` WS
DOUBLE_QUOTE    = `"`
WS              = ZeroOrMore<` `>
// TODO: was... restore... WS              = ZeroOrMore<` ` | `\t` | `\n` | `\r`>
