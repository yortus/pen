import false, null, true, i32 from './js-intrinsics.pen.ts'
import Maybe, Not, ZeroOrMore from './utils.pen'
import Translit from 'pen'




// ---------- JSON Grammar ----------
start = WS   Value   WS
Value =
    |   False
    |   Null
    |   True
    |   Object
    |   Array
    |   Number
    |   String

// ---------- Primitive values ----------
False   = "false"   false
Null    = "null"   null
True    = "true"   true

// ---------- Objects ----------
Object      = LBRACE   (Properties | {})   RBRACE
Properties  = {[String]: COLON Value}   Maybe(COMMA Properties)

// ---------- Arrays ----------
Array       = LBRACKET   (Elements | [])   RBRACKET
Elements    = [Value]   Maybe(COMMA Elements)

// ---------- Numbers ----------
Number = i32 // TODO: should be f64? check JS specs

// ---------- Strings ----------
String = DOUBLE_QUOTE   ZeroOrMore(CHAR)   DOUBLE_QUOTE
// TODO: how is string of escape sequence chars (in SPAN) mapped to/from the single char it represents (in NODE)
//       - something akin to `i32` which parses a number from the input span, call it `char`. Understands common escape sequences
CHAR =
    |   Not("\x00-\x1f"   |   "\""   |   "\\")   char           // any char except control char, " or \
    |   "\\\""   '"'                                             // quotation mark
    |   "\\\\"   '\\'                                           // reverse solidus
    |   "\\/"   '/'                                             // solidus
    |   "\\b"   '\b'                                            // backspace
    |   "\\f"   '\f'                                            // formfeed
    |   "\\n"   '\n'                                            // newline
    |   "\\r"   '\r'                                            // carriage return
    |   "\\t"   '\t'                                            // horizontal tab

    // TODO: support \uXXXX for completeness...
    //       but how to convert esc seq in text to/from char in ast node? custom transcoder?
    //       make `char` parse escape sequences? Provide a variant of `char`, eg `charesc`?
    // TODO: was...
    // |   is (`\\u`    HEXDIG   HEXDIG   HEXDIG   HEXDIG)   char  // unicode escape sequence
    //
    // HEXDIG = `0`..`9`   |   `a`..`f`   |   `A`..`F`

// ---------- Literal characters ----------
LBRACE          = WS "{" WS
RBRACE          = WS "}" WS
LBRACKET        = WS "[" WS
RBRACKET        = WS "]" WS
COLON           = WS ":" WS
COMMA           = WS "," WS
DOUBLE_QUOTE    = "\""
WS              = ZeroOrMore(" " | "\t" | "\n" | "\r")
